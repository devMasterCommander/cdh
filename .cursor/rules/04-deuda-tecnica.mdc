---
description: Deuda t√©cnica y consideraciones futuras del proyecto
---

# Deuda T√©cnica y Consideraciones Futuras

Estos puntos han sido **aparcados intencionalmente** para abordarlos despu√©s del MVP. No deben implementarse ahora, pero deben tenerse en cuenta para el futuro.

## üêõ Errores Conocidos a Resolver

### 1. Error de `params` en Next.js
**Problema**: Aviso en p√°ginas din√°micas
```
‚®Ø Route "/cursos/[courseId]/leccion/[lessonId]": params should be awaited
```

**Ubicaci√≥n**: 
- [src/app/cursos/[courseId]/leccion/[lessonId]/page.tsx](mdc:src/app/cursos/[courseId]/leccion/[lessonId]/page.tsx)
- [src/app/cursos/[courseId]/page.tsx](mdc:src/app/cursos/[courseId]/page.tsx)

**Soluci√≥n Pendiente**: Implementar `await params` en componentes de servidor seg√∫n las nuevas gu√≠as de Next.js 15.

**Prioridad**: Media (no afecta funcionalidad, solo warnings)

## üöÄ Funcionalidades Pendientes

### 2. Seguimiento de Progreso en Video (Vimeo)
**Estado**: Desactivado temporalmente

**Problema Actual**: La comunicaci√≥n del `<iframe>` de Vimeo con nuestra API de progreso no est√° implementada.

**Soluci√≥n Planificada**: 
- Usar la librer√≠a `Player.js` de Vimeo (@vimeo/player)
- Escuchar eventos de `timeupdate` del reproductor
- Enviar timestamp a `/api/progress/update-time` cada X segundos
- Guardar √∫ltimo segundo visto en `LessonProgress.lastTimestamp`

**Archivo Afectado**: [src/components/VideoPlayer.tsx](mdc:src/components/VideoPlayer.tsx)

**Prioridad**: Alta (feature importante para UX)

### 3. Social Login (Autenticaci√≥n Social)
**Estado**: No implementado

**Proveedores a A√±adir**:
- ‚úÖ Google (NextAuth ya soporta, falta configurar)
- ‚¨ú Facebook
- ‚¨ú GitHub (opcional)

**Ubicaci√≥n**: [src/app/api/auth/[...nextauth]/route.ts](mdc:src/app/api/auth/[...nextauth]/route.ts)

**Requisitos**:
- Configurar OAuth apps en cada proveedor
- A√±adir credenciales a variables de entorno
- Actualizar configuraci√≥n de NextAuth

**Prioridad**: Media

### 4. Pago de Comisiones a Afiliados
**Estado**: No implementado

**Funcionalidades Requeridas**:
1. **Interfaz de Afiliado**:
   - Dashboard con comisiones acumuladas
   - Historial de comisiones (nivel 1, 2, 3, etc.)
   - Bot√≥n "Solicitar Pago"

2. **L√≥gica de Negocio**:
   - Monto m√≠nimo para solicitar pago
   - Estados: `pending` ‚Üí `requested` ‚Üí `paid`
   - Notificaciones email al solicitar pago
   - Panel de administraci√≥n para aprobar pagos

3. **Integraci√≥n con Stripe**:
   - Stripe Connect para transferencias
   - O registro de cuenta bancaria manual
   - Registro de transacciones

**Archivos Relacionados**:
- [src/lib/server/commissions.ts](mdc:src/lib/server/commissions.ts) - L√≥gica existente
- Nueva ruta API: `src/app/api/commissions/request-payment/route.ts`
- Nuevo modelo: `CommissionPayment` en [schema.prisma](mdc:prisma/schema.prisma)

**Prioridad**: Alta (feature core del negocio)

## üìù Mejoras de C√≥digo

### 5. Optimizaciones de Rendimiento
- Implementar lazy loading en listado de cursos
- Optimizar queries de Prisma con `select` espec√≠ficos
- A√±adir indices en tablas de BD para queries frecuentes

### 6. Testing
- A√±adir tests unitarios (Jest)
- A√±adir tests de integraci√≥n para API routes
- Tests E2E con Playwright/Cypress

### 7. Monitoreo y Logs
- Implementar sistema de logging (Winston, Pino)
- Integrar Sentry para error tracking
- Analytics de uso de la plataforma

## ‚ö†Ô∏è Recordatorios

- **NO** implementar estas funcionalidades hasta que se soliciten expl√≠citamente
- **S√ç** mencionarlas si son relevantes para una discusi√≥n t√©cnica
- **S√ç** documentar nuevas deudas t√©cnicas que surjan durante el desarrollo
- Mantener este archivo actualizado con cada nueva consideraci√≥n
