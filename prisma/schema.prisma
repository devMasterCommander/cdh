// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- ENUMS ---
enum UserType {
  GUEST       // Usuario registrado sin compras
  CUSTOMER    // Usuario con compras
  AFFILIATE   // Afiliado (puede referir y ganar comisiones)
  ADMIN       // Administrador del sistema
}

enum AffiliateRequestStatus {
  NONE        // No ha solicitado
  PENDING     // Solicitud pendiente de aprobación
  APPROVED    // Aprobado (ya es AFFILIATE)
  REJECTED    // Rechazado
}

// --- MODELOS DE AUTENTICACIÓN (NextAuth.js) ---
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  userType      UserType  @default(GUEST) // Tipo de usuario
  affiliateRequestStatus AffiliateRequestStatus @default(NONE) // Estado de solicitud de afiliado
  referralSlug  String?   @unique // Slug personalizado para URL de referido
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  
  sponsorId     String?
  sponsor       User?     @relation("Sponsorship", fields: [sponsorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sponsored     User[]    @relation("Sponsorship")
  
  commissionsReceived Commission[] @relation("CommissionsReceived")
  purchasesMade       Commission[] @relation("PurchasesMade")
  
  purchases      Purchase[]
  lessonProgress LessonProgress[] // Progreso del usuario en las lecciones
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

// --- MODELOS DE NEGOCIO (LMS, Comisiones, Compras) ---
model Course {
  id          String       @id @default(cuid())
  name        String
  price       Float
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  modules     Module[]
  purchases   Purchase[]
  commissions Commission[]
}

model Module {
  id        String   @id @default(cuid())
  name      String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  lessons   Lesson[]
}

model Lesson {
  id           String   @id @default(cuid())
  name         String
  vimeoVideoId String
  order        Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  moduleId   String
  module     Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  
  progress   LessonProgress[] // Progreso de los usuarios en esta lección
}

model Purchase {
  id                   String   @id @default(cuid())
  createdAt            DateTime @default(now())
  stripePaymentIntentId String   @unique
  
  userId               String
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  courseId             String
  course               Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model Commission {
  id          String   @id @default(cuid())
  amount      Float
  level       Int
  status      String   @default("pending")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  affiliateId String
  affiliate   User     @relation("CommissionsReceived", fields: [affiliateId], references: [id])
  buyerId     String
  buyer       User     @relation("PurchasesMade", fields: [buyerId], references: [id])
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id])
}

model Setting {
  key   String @id
  value String
}

// MODELO PARA EL PROGRESO
model LessonProgress {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  isCompleted   Boolean  @default(false)
  lastTimestamp Float    @default(0) // Guardar el segundo exacto

  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  lessonId      String
  lesson        Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId]) // Un usuario solo puede tener un registro de progreso por lección
}