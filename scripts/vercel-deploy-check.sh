#!/bin/bash

# Script de validaci√≥n para deployment en Vercel
# Ejecuta todas las validaciones necesarias antes de hacer deployment

echo "üöÄ Iniciando validaci√≥n para deployment en Vercel..."

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Funci√≥n para mostrar errores
show_error() {
    echo -e "${RED}‚ùå ERROR: $1${NC}"
    exit 1
}

# Funci√≥n para mostrar √©xito
show_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

# Funci√≥n para mostrar advertencias
show_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

# Funci√≥n para mostrar informaci√≥n
show_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

echo "üìã Paso 1: Verificando ESLint..."
if ! npm run lint; then
    show_warning "ESLint encontr√≥ errores, pero est√° deshabilitado durante el build"
    show_info "ESLint est√° configurado con ignoreDuringBuilds: true en next.config.ts"
    show_info "Esto permite el deployment mientras se corrigen los errores"
else
    show_success "ESLint pas√≥ sin errores"
fi

echo "üìã Paso 2: Verificando build local..."
if ! npm run build; then
    show_error "Build local fall√≥. Corrige los errores antes de hacer deployment."
fi
show_success "Build local exitoso"

echo "üìã Paso 3: Verificando archivos con hooks de Next.js..."
echo "üîç Buscando useSearchParams sin Suspense..."
SEARCH_PARAMS_FILES=$(grep -r "useSearchParams" src/app --include="*.tsx" --include="*.ts" | grep -v "Suspense" | wc -l)
if [ "$SEARCH_PARAMS_FILES" -gt 0 ]; then
    show_warning "Se encontraron archivos con useSearchParams que podr√≠an necesitar Suspense boundaries:"
    grep -r "useSearchParams" src/app --include="*.tsx" --include="*.ts" | grep -v "Suspense"
fi

echo "üîç Buscando usePathname sin Suspense..."
PATHNAME_FILES=$(grep -r "usePathname" src/app --include="*.tsx" --include="*.ts" | grep -v "Suspense" | wc -l)
if [ "$PATHNAME_FILES" -gt 0 ]; then
    show_warning "Se encontraron archivos con usePathname que podr√≠an necesitar Suspense boundaries:"
    grep -r "usePathname" src/app --include="*.tsx" --include="*.ts" | grep -v "Suspense"
fi

echo "üìã Paso 4: Verificando configuraci√≥n de Next.js..."
if [ ! -f "next.config.ts" ]; then
    show_error "next.config.ts no encontrado"
fi

# Verificar que ignoreDuringBuilds est√© configurado
if grep -q "ignoreDuringBuilds.*true" next.config.ts; then
    show_warning "ESLint est√° deshabilitado durante el build (ignoreDuringBuilds: true)"
    show_info "Recuerda re-habilitar ESLint despu√©s del deployment exitoso"
fi

if grep -q "ignoreBuildErrors.*true" next.config.ts; then
    show_warning "TypeScript est√° deshabilitado durante el build (ignoreBuildErrors: true)"
    show_info "Recuerda re-habilitar TypeScript despu√©s del deployment exitoso"
fi

echo "üìã Paso 5: Verificando configuraci√≥n de Vercel..."
if [ ! -f "vercel.json" ]; then
    show_warning "vercel.json no encontrado - se usar√° configuraci√≥n por defecto"
else
    show_success "vercel.json encontrado"
fi

echo "üìã Paso 6: Verificando variables de entorno cr√≠ticas..."
REQUIRED_ENV_VARS=("DATABASE_URL" "NEXTAUTH_SECRET" "NEXTAUTH_URL")
MISSING_VARS=()

for var in "${REQUIRED_ENV_VARS[@]}"; do
    if [ -z "${!var}" ]; then
        MISSING_VARS+=("$var")
    fi
done

if [ ${#MISSING_VARS[@]} -gt 0 ]; then
    show_warning "Variables de entorno faltantes localmente: ${MISSING_VARS[*]}"
    show_info "Aseg√∫rate de configurarlas en Vercel Dashboard antes del deployment"
fi

echo "üìã Paso 7: Verificando archivos de Stripe..."
STRIPE_FILES=$(find src/app/api -name "*.ts" -exec grep -l "Stripe" {} \; | wc -l)
if [ "$STRIPE_FILES" -gt 0 ]; then
    show_info "Se encontraron $STRIPE_FILES archivos que usan Stripe"
    show_info "Aseg√∫rate de configurar STRIPE_SECRET_KEY en Vercel"
fi

echo "üìã Paso 8: Verificando dependencias..."
if [ ! -f "package.json" ]; then
    show_error "package.json no encontrado"
fi

# Verificar que las dependencias cr√≠ticas est√©n presentes
CRITICAL_DEPS=("next" "react" "typescript")
for dep in "${CRITICAL_DEPS[@]}"; do
    if ! grep -q "\"$dep\"" package.json; then
        show_error "Dependencia cr√≠tica faltante: $dep"
    fi
done
show_success "Dependencias cr√≠ticas verificadas"

show_success "Todas las validaciones pasaron"
echo -e "${GREEN}üöÄ Listo para deployment en Vercel${NC}"
echo -e "${BLUE}üìù Pr√≥ximos pasos:${NC}"
echo -e "${BLUE}   1. Configurar variables de entorno en Vercel Dashboard${NC}"
echo -e "${BLUE}   2. Hacer push a main${NC}"
echo -e "${BLUE}   3. Verificar deployment en Vercel${NC}"
echo -e "${BLUE}   4. Re-habilitar ESLint y TypeScript despu√©s del deployment exitoso${NC}"
